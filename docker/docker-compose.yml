version: '3.8'

services:
  # Redis service for message queuing and rate limiting
  redis:
    image: redis:7-alpine
    container_name: fees-manager-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - fees-manager-network

  # Fees Manager Automation service
  fees-manager-automation:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: fees-manager-automation
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TZ=Asia/Karachi
      # Load environment variables from .env file
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DATABASE=0
      # WPPConnect configuration
      - WPPCONNECT_SERVER_URL=http://wppconnect-server:8080
      - WPPCONNECT_SESSION_ID=default
      - WPPCONNECT_TIMEOUT=30000
      - WPPCONNECT_MAX_RETRIES=3
      - WPPCONNECT_RETRY_DELAY=2000
      # Firebase configuration (will be overridden by .env)
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      # Logging
      - LOG_LEVEL=info
    volumes:
      - automation_logs:/app/logs
      - ../.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "src/scheduler.js", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fees-manager-network
    # Uncomment if you want to connect to existing WPPConnect server
    # depends_on:
    #   - wppconnect-server

  # Optional: WPPConnect Server (uncomment if you want to run it locally)
  # wppconnect-server:
  #   image: wppconnect/wppconnect:latest
  #   container_name: wppconnect-server
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - WPPCONNECT_SERVER_PORT=8080
  #     - WPPCONNECT_SERVER_HOST=0.0.0.0
  #     - WPPCONNECT_SERVER_SECRET_KEY=your-secret-key
  #   volumes:
  #     - wppconnect_data:/app/.wwebjs_auth
  #     - wppconnect_sessions:/app/.wwebjs_cache
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   networks:
  #     - fees-manager-network

  # Optional: Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fees-manager-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - fees-manager-network
    profiles:
      - dev

  # Optional: Prometheus for monitoring (production)
  prometheus:
    image: prom/prometheus:latest
    container_name: fees-manager-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fees-manager-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization (production)
  grafana:
    image: grafana/grafana:latest
    container_name: fees-manager-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - fees-manager-network
    profiles:
      - monitoring

# Volumes
volumes:
  redis_data:
    driver: local
  automation_logs:
    driver: local
  wppconnect_data:
    driver: local
  wppconnect_sessions:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  fees-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
